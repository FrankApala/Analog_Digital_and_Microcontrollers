;  Assembly code generated by mikroVirtualMachine - V. 5.0.0.3
;  Date/Time: 01/06/2021 09:26:06
;  Info: http://www.mikroe.com


; ADDRESS	OPCODE	ASM
; ----------------------------------------------
$0000	$282E			GOTO	_main
$0004	$	_interrupt:
$0004	$00FF			MOVWF	STACK_15
$0005	$0E03			SWAPF	STATUS, 0
$0006	$0183			CLRF	STATUS
$0007	$00A2			MOVWF	?saveSTATUS
$0008	$0804			MOVF	FSR, 0
$0009	$00A1			MOVWF	?saveFSR
$000A	$080A			MOVF	PCLATH, 0
$000B	$00A3			MOVWF	?savePCLATH
$000C	$018A			CLRF	PCLATH
;Timer.ppas,6 :: 		begin
;Timer.ppas,7 :: 		if (cnt = 125) then
$000D	$0820			MOVF	_cnt, 0
$000E	$3A7D			XORLW	125
$000F	$1D03			BTFSS	STATUS, Z
$0010	$2820			GOTO	Timer_L_2
$0011	$	Timer_L_1:
;Timer.ppas,9 :: 		PORTC.0 := PORTC.0 xor 1;     // toggle PORTC LEDs
$0011	$0807			MOVF	PORTC, 0
$0012	$00F1			MOVWF	STACK_1
$0013	$3001			MOVLW	1
$0014	$05F1			ANDWF	STACK_1, 1
$0015	$3001			MOVLW	1
$0016	$06F1			XORWF	STACK_1, 1
$0017	$0871			MOVF	STACK_1, 0
$0018	$3A00			XORLW	0
$0019	$1D03			BTFSS	STATUS, Z
$001A	$281D			GOTO	Timer_L_4
$001B	$1007			BCF	PORTC, 0
$001C	$281E			GOTO	Timer_L_5
$001D	$	Timer_L_4:
$001D	$1407			BSF	PORTC, 0
$001E	$	Timer_L_5:
;Timer.ppas,10 :: 		cnt := 0;               // reset cnt
$001E	$01A0			CLRF	_cnt, 1
;Timer.ppas,11 :: 		end
$001F	$2825			GOTO	Timer_L_3
;Timer.ppas,12 :: 		else
$0020	$	Timer_L_2:
;Timer.ppas,14 :: 		Inc(cnt);                   // increment value of cnt on every interrupt
$0020	$0AA0			INCF	_cnt, 1
;Timer.ppas,15 :: 		TMR0   := 6;
$0021	$3006			MOVLW	6
$0022	$0081			MOVWF	TMR0
;Timer.ppas,17 :: 		INTCON.T0IE :=1;
$0023	$	Timer_L_6:
$0023	$168B			BSF	INTCON, 5
$0024	$	Timer_L_7:
;Timer.ppas,18 :: 		INTCON.T0IF :=0;
$0024	$110B			BCF	INTCON, 2
$0025	$	Timer_L_9:
;Timer.ppas,19 :: 		end;
$0025	$	Timer_L_3:
$0025	$	Timer_L_0:
;Timer.ppas,20 :: 		end;
$0025	$	L_Interrupt_end:
$0025	$0823			MOVF	?savePCLATH, 0
$0026	$008A			MOVWF	PCLATH
$0027	$0821			MOVF	?saveFSR, 0
$0028	$0084			MOVWF	FSR
$0029	$0E22			SWAPF	?saveSTATUS, 0
$002A	$0083			MOVWF	STATUS
$002B	$0EFF			SWAPF	STACK_15, 1
$002C	$0E7F			SWAPF	STACK_15, 0
$002D	$0009			RETFIE
$002E	$	_main:
;Timer.ppas,22 :: 		begin
;Timer.ppas,23 :: 		OPTION_REG := $84;         // assign prescaler to TMR0 (/32)
$002E	$3084			MOVLW	132
$002F	$1303			BCF	STATUS, RP1
$0030	$1683			BSF	STATUS, RP0
$0031	$0081			MOVWF	OPTION_REG
;Timer.ppas,24 :: 		TRISC := 0x00;             // PORTC is output
$0032	$0187			CLRF	TRISC, 1
;Timer.ppas,25 :: 		PORTC := 0x00;             // initialize PORTC
$0033	$1283			BCF	STATUS, RP0
$0034	$0187			CLRF	PORTC, 1
;Timer.ppas,26 :: 		TMR0  := 6;                // timer0 initial value
$0035	$3006			MOVLW	6
$0036	$0081			MOVWF	TMR0
;Timer.ppas,27 :: 		INTCON := $A0;             // enable TMRO interrupt
$0037	$30A0			MOVLW	160
$0038	$008B			MOVWF	INTCON
;Timer.ppas,28 :: 		cnt := 0;                  // initialize cnt
$0039	$01A0			CLRF	_cnt, 1
;Timer.ppas,30 :: 		while TRUE do
$003A	$	Timer_L_12:
$003A	$283A			GOTO	Timer_L_12
;Timer.ppas,34 :: 		end.
$003B	$283B			GOTO	$
